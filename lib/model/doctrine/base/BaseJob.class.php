<?php

/**
 * BaseJob
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property text $params
 * @property string $hash
 * @property enum $status
 * @property text $error_message
 * @property timestamp $accessed_at
 * @property timestamp $process_started_at
 * @property timestamp $process_finished_at
 * @property string $type
 * @property Doctrine_Collection $Results
 * 
 * @method text                getParams()              Returns the current record's "params" value
 * @method string              getHash()                Returns the current record's "hash" value
 * @method enum                getStatus()              Returns the current record's "status" value
 * @method text                getErrorMessage()        Returns the current record's "error_message" value
 * @method timestamp           getAccessedAt()          Returns the current record's "accessed_at" value
 * @method timestamp           getProcessStartedAt()    Returns the current record's "process_started_at" value
 * @method timestamp           getProcessFinishedAt()   Returns the current record's "process_finished_at" value
 * @method string              getType()                Returns the current record's "type" value
 * @method Doctrine_Collection getResults()             Returns the current record's "Results" collection
 * @method Job                 setParams()              Sets the current record's "params" value
 * @method Job                 setHash()                Sets the current record's "hash" value
 * @method Job                 setStatus()              Sets the current record's "status" value
 * @method Job                 setErrorMessage()        Sets the current record's "error_message" value
 * @method Job                 setAccessedAt()          Sets the current record's "accessed_at" value
 * @method Job                 setProcessStartedAt()    Sets the current record's "process_started_at" value
 * @method Job                 setProcessFinishedAt()   Sets the current record's "process_finished_at" value
 * @method Job                 setType()                Sets the current record's "type" value
 * @method Job                 setResults()             Sets the current record's "Results" collection
 * 
 * @package    Protorama Blue
 * @subpackage model
 * @author     Tino Truppel
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseJob extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('job');
        $this->hasColumn('params', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('hash', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'new',
              1 => 'queued',
              2 => 'processing',
              3 => 'processed',
              4 => 'failed',
              5 => 'waiting',
             ),
             'notnull' => true,
             'notblank' => true,
             ));
        $this->hasColumn('error_message', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('accessed_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('process_started_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('process_finished_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));

        $this->setSubClasses(array(
             'ImageJob' => 
             array(
              'type' => 'image',
             ),
             'PdfJob' => 
             array(
              'type' => 'pdf',
             ),
             'WordJob' => 
             array(
              'type' => 'word',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Result as Results', array(
             'local' => 'id',
             'foreign' => 'job_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}